/*
Name		  : Yash Kumar Singh
Roll Number	  : 1310110373
Program Title : MySQL L5
*/

/* Problem 1 */

ALTER TABLE FACULTY DROP FOREIGN KEY FACULTY_ibfk_1;
ALTER TABLE STUDENT DROP FOREIGN KEY STUDENT_ibfk_1;
ALTER TABLE COURSES DROP PRIMARY KEY;

ALTER TABLE COURSES ADD COLUMN courseSem VARCHAR(7) NOT NULL;
ALTER TABLE STUDENT ADD COLUMN courseSem VARCHAR(7) NOT NULL;
ALTER TABLE FACULTY ADD COLUMN courseSem VARCHAR(7) NOT NULL;

UPDATE COURSES SET courseSem = 'SPRING';
UPDATE COURSES SET courseSem = 'MONSOON' WHERE (courseID = 'CSD101' OR courseID = 'CSD201' OR courseID = 'CSD203' OR courseID = 'CSD301' OR courseID = 'CSD302' OR courseID = 'CSD303' OR courseID = 'CSD304' OR courseID = 'CSD335' OR courseID = 'CSD338');
UPDATE STUDENT SET courseSem = 'SPRING';
UPDATE STUDENT SET courseSem = 'MONSOON' WHERE (courseID = 'CSD101' OR courseID = 'CSD201' OR courseID = 'CSD203' OR courseID = 'CSD301' OR courseID = 'CSD302' OR courseID = 'CSD303' OR courseID = 'CSD304' OR courseID = 'CSD335' OR courseID = 'CSD338');
UPDATE FACULTY SET courseSem = 'SPRING';
UPDATE FACULTY SET courseSem = 'MONSOON' WHERE (courseID = 'CSD101' OR courseID = 'CSD201' OR courseID = 'CSD203' OR courseID = 'CSD301' OR courseID = 'CSD302' OR courseID = 'CSD303' OR courseID = 'CSD304' OR courseID = 'CSD335' OR courseID = 'CSD338');

ALTER TABLE COURSES ADD PRIMARY KEY (courseID,courseSem);
ALTER TABLE STUDENT ADD FOREIGN KEY (courseID,courseSem) REFERENCES COURSES(courseID,courseSem);
ALTER TABLE FACULTY ADD FOREIGN KEY (courseID,courseSem) REFERENCES COURSES(courseID,courseSem);

/* Problem 2 */

/* (a) */

DELIMITER //
CREATE PROCEDURE repeatCourse(IN PARAM1 VARCHAR(6),IN PARAM2 VARCHAR(30))
BEGIN
DECLARE A VARCHAR(6);
DECLARE B VARCHAR(30);
DECLARE C VARCHAR(30);
DECLARE D VARCHAR(30);
DECLARE E VARCHAR(7);
DECLARE W VARCHAR(50);
DECLARE X VARCHAR(25);
DECLARE Y VARCHAR(50);
SET A = PARAM1;
SET B = PARAM2;
SELECT facultyPosition INTO C FROM FACULTY WHERE courseID = PARAM1 AND facultyName = PARAM2;
SELECT facultyQualification INTO D FROM FACULTY WHERE courseID = PARAM1 AND facultyName = PARAM2;
SELECT courseSem INTO E FROM FACULTY WHERE courseID = PARAM1 AND facultyName = PARAM2;
IF E = 'MONSOON' THEN
	SET E = 'SPRING';
ELSE
	SET E = 'MONSOON';
END IF;
SELECT courseName INTO W FROM COURSES WHERE courseID = PARAM1;
SELECT courseDept INTO X FROM COURSES WHERE courseID = PARAM1;
SELECT courseSchool INTO Y FROM COURSES WHERE courseID = PARAM1;
INSERT INTO COURSES VALUES(A,W,X,Y,E);
INSERT INTO FACULTY VALUES(A,B,C,D,E);
END
//
DELIMITER ;

CALL repeatCourse('CSD323','DEBOPAM ACHARYA');
DROP PROCEDURE repeatCourse;

/* (b) */
DELIMITER //
CREATE PROCEDURE showStudent(IN PARAM1 VARCHAR(6), IN PARAM2 INT(1))
BEGIN
DECLARE A VARCHAR(30);
DECLARE CUR CURSOR FOR SELECT studentName FROM STUDENT WHERE courseID = PARAM1;
OPEN CUR;
REPEAT	
	FETCH CUR INTO A;
	SET PARAM2 = PARAM2 - 1;
	UNTIL PARAM2 = 0
END REPEAT;
CLOSE CUR;
SELECT studentName,studentMajor FROM STUDENT WHERE studentName = A AND courseID = PARAM1;
END
//
DELIMITER ;

CALL showStudent('CSD101','3');
DROP PROCEDURE showStudent;

/* (c) */

DELIMITER //
CREATE TRIGGER detectInsert
BEFORE INSERT ON STUDENT
FOR EACH ROW
SET @COUNT = @COUNT + 1;
//
DELIMITER ;
SET @COUNT = 0;

DROP TRIGGER detectInsert;

/* (d) */

DELIMITER //
CREATE TRIGGER updatedCourseID
AFTER UPDATE ON COURSES
FOR EACH ROW     
BEGIN   
UPDATE STUDENT SET courseID = NEW.courseID WHERE courseID = OLD.courseID;	
UPDATE FACULTY SET courseID = NEW.courseID WHERE courseID = OLD.courseID;	
END
//
DELIMITER ;

DROP TRIGGER updatedCourseID;

/* (e) */

DELIMITER //
CREATE TRIGGER deletedCourseID
AFTER DELETE ON COURSES
FOR EACH ROW     
BEGIN   
DELETE FROM STUDENT WHERE courseID = OLD.courseID;	
DELETE FROM FACULTY WHERE courseID = OLD.courseID;	
END
//
DELIMITER ;

DROP TRIGGER deletedCourseID;

